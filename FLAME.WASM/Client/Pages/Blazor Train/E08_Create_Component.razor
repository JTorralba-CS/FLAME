@implements IDisposable

@inject Dispose Dispose

@inject NavigationManager MyNavigationManager

<div style="
    padding: 1vw;
    margin-right: 1vw;
    margin-top: 1vw;
    float: left;
    background-color: lightgray;
    box-shadow: 10px 10px 20px 0px rgba(0,0,0,0,0.75);"
>
<button @onclick="Close">&nbspCLOSE&nbsp</button>
<br />
<br />

@if (Message != null)
    {
        <p>@Message</p>
    }

</div>

@code {
    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public EventCallback<string> CloseRequested { get; set; }

    bool Working = false;

    async Task Close()
    {
        Dispose.SetMessage(Message);

        await CloseRequested.InvokeAsync(Message);
    }

    public override async Task SetParametersAsync(ParameterView Parameters)
    {
        if (Message != null)
        {
            Console.WriteLine($"Console: {Message} SetParametersAsync()");
            System.Diagnostics.Debug.WriteLine($"Debug: {Message} SetParametersAsync()");
        }
        else
        {
            Console.WriteLine($"Console: N SetParametersAsync()");
            System.Diagnostics.Debug.WriteLine($"Debug: N SetParametersAsync()");
        }

        await base.SetParametersAsync(Parameters);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Message != null)
        {
            Console.WriteLine($"Console: {Message} OnInitialized()");
            System.Diagnostics.Debug.WriteLine($"Debug: {Message} OnInitialized()");
        }
        else
        {
            Console.WriteLine($"Console: N OnInitialized()");
            System.Diagnostics.Debug.WriteLine($"Debug: N OnInitialized()");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        if (!Working)
        {
            Working = true;

            if (Message != null)
            {
                Console.WriteLine($"Console: {Message} OnParametersSetAsync() Start Working");
                System.Diagnostics.Debug.WriteLine($"Debug: {Message} OnParametersSetAsync() Start Working");
            }
            else
            {
                Console.WriteLine($"Console: N OnParametersSetAsync() Start Working");
                System.Diagnostics.Debug.WriteLine($"Debug: N OnParametersSetAsync() Start Working");
            }

            while (Working)
            {
                await Task.Delay(500);
            }

            if (Dispose.Message != null)
            {
                Console.WriteLine($"Console: {Dispose.Message} OnParametersSetAsync() Stopped Working");
                System.Diagnostics.Debug.WriteLine($"Debug: {Dispose.Message} OnParametersSetAsync() Stopped Working");
            }
            else
            {
                Console.WriteLine($"Console: N OnParametersSetAsync() Start Working");
                System.Diagnostics.Debug.WriteLine($"Debug: N OnParametersSetAsync() Stopped Working");
            }

            Dispose.Message = null;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Message != null)
        {
            Console.WriteLine($"Console: {Message} OnParametersSet()");
            System.Diagnostics.Debug.WriteLine($"Debug: {Message} OnParametersSet()");
        }
        else
        {
            Console.WriteLine($"Console: N OnParametersSet()");
            System.Diagnostics.Debug.WriteLine($"Debug: N OnParametersSet()");
        }
    }

    protected override void OnAfterRender(bool FirstRender)
    {
        base.OnAfterRender(FirstRender);

        if (Message != null)
        {
            Console.WriteLine($"Console: {Message} OnAfterRender() FirstRender = {FirstRender}");
            System.Diagnostics.Debug.WriteLine($"Debug: {Message} OnAfterRender() FirstRender = {FirstRender}");
        }
        else
        {
            Console.WriteLine($"Console: N OnAfterRender() FirstRender = {FirstRender}");
            System.Diagnostics.Debug.WriteLine($"Debug: N OnAfterRender() FirstRender = {FirstRender}");
        }
    }

    void IDisposable.Dispose()
    {
        if (Dispose.Message != null)
        {
            Console.WriteLine($"Console: {Dispose.Message} Dispose()");
            System.Diagnostics.Debug.WriteLine($"Debug: {Dispose.Message} Dispose()");
        }
        else
        {
            Console.WriteLine($"Console: N Dispose()");
            System.Diagnostics.Debug.WriteLine($"Debug: N Dispose()");
        }

        if (Working)
        {
            Working = false;

            if (MyNavigationManager.BaseUri.Contains("9110"))
            {
                Task.Delay(5000).GetAwaiter().GetResult();
            }
        }
    }
}
